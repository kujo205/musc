generator kysely {
  provider            = "prisma-kysely"
  output              = "."
  enumFileName        = "enums.ts"
  fileName            = "db-types.d.ts"
  booleanTypeOverride = "boolean"
  decimalTypeOverride = "number"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model Account {
  id                String  @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  userId            String  @db.VarChar(36)
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refreshToken      String? @map("refresh_token") @db.VarChar(255)
  accessToken       String? @map("access_token") @db.VarChar(555)
  expiresAt         BigInt? @map("expires_at")
  tokenType         String? @map("token_type") @db.VarChar(255)
  scope             String? @db.VarChar(255)
  idToken           String? @map("id_token") @db.Text
  sessionState      String? @map("session_state") @db.VarChar(255)
  oauthTokenSecret  String? @map("oauth_token_secret") @db.VarChar(255)
  oauthToken        String? @map("oauth_token") @db.VarChar(255)
  user              User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Account_User_id_fk")

  @@index([userId], map: "Account_userId_index")
}

model Session {
  id           String   @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  userId       String   @db.VarChar(36)
  sessionToken String   @unique(map: "sessionToken") @db.VarChar(255)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Session_User_id_fk")

  @@index([userId], map: "Session_userId_index")
}

model User {
  id                     String                @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  name                   String?               @db.VarChar(255)
  email                  String                @unique(map: "email") @db.VarChar(255)
  emailVerified          DateTime?             @default(now())
  image                  String?               @db.VarChar(255)
  subscriptionType       UserSubscriptionType? @default(free) @map("subscription_type")
  ytmusicCookie          String?               @map("ytmusic_cookie") @db.VarChar(10000)
  ytmusicCookieExpiresAt DateTime?             @map("ytmusic_cookie_expires_at") @db.Timestamp(0)
  ytmusicSetCookie       String?               @map("ytmusic_set_cookie") @db.VarChar(1000)
  account                Account[]
  session                Session[]
  playlists              Playlists[]
}

model VerificationToken {
  identifier String   @db.VarChar(255)
  token      String   @unique(map: "token") @db.VarChar(255)
  expires    DateTime
}

model KyselyMigration {
  name      String @id @db.VarChar(255)
  timestamp String @db.VarChar(255)

  @@map("kysely_migration")
}

model KyselyMigrationLock {
  id       String @id @db.VarChar(255)
  isLocked Int    @default(0) @map("is_locked")

  @@map("kysely_migration_lock")
}

model PlaylistSyncs {
  id            String     @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  playlistId    String?    @map("playlist_id") @db.VarChar(36)
  addedNumber   Int        @default(0) @map("added_number")
  removedNumber Int        @default(0) @map("removed_number")
  createdAt     DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  user          Playlists? @relation(fields: [playlistId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playlist_syncs_User_id_fk")

  @@index([playlistId], map: "playlist_syncs_playlists_id_fk")
  @@map("playlist_syncs")
}

model Playlists {
  id                        String          @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  name                      String?         @db.Text
  description               String?         @db.Text
  userId                    String          @map("user_id") @db.VarChar(36)
  isPublicOnMuscMarketplace Boolean         @default(false) @map("is_public_on_musc_marketplace")
  isAutoUpdated             Boolean?        @default(false) @map("is_auto_updated")
  link                      String          @db.VarChar(256)
  deletedAtYt               Boolean?        @default(false) @map("deleted_at_yt")
  createdAt                 DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt                 DateTime?       @map("updated_at") @db.Timestamp(0)
  playlistSyncs             PlaylistSyncs[]
  user                      User            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playlists_User_id_fk")

  @@index([userId], map: "playlists_User_id_fk")
  @@map("playlists")
}

model LikedPlaylists {
  playlistId String    @map("playlist_id") @db.VarChar(36)
  userId     String    @map("user_id") @db.VarChar(36)
  liked      Boolean   @default(false)
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime? @map("updated_at") @db.Timestamp(0)

  @@unique([playlistId, userId], map: "liked_playlists_pk")
  @@map("liked_playlists")
}

enum UserSubscriptionType {
  free
  basic

  @@map("User_subscription_type")
}
